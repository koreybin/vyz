状态码 ：

200 – OK – 一切正常
201 – OK – 新资源已经被创建
204 – OK – 资源删除成功

304 – 没有变化，客户端可以使用缓存数据

400 – Bad Request – 调用不合法，确切的错误应该在error payload中描述，例如：“JSON 不合法 ”
401 – 未认证，调用需要用户通过认证
403 – 不允许的，服务端正常解析和请求，但是调用被回绝或者不被允许
404 – 未找到，指定的资源不存在
422 – 不可指定的请求体 – 只有服务器不能处理实体时使用，比如图像不能被格式化，或者重要字段丢失。

500 – Internal Server Error – 标准服务端错误，API开发人员应该尽量避开这种错误




返回数据格式：

   成功：list   : { data:[ ]，status:"状态码"}
	 detail : {data:"信息"，status:"状态码"}

   失败：
	post:
		{“提交字段名称”：“错误信息”}
		或{“detail”:“错误信息”}
		或{“non_field_errors”:"无法使用提供的认证信息登录"} （登录的时候，账号或者密码错误）


	get :   {"detail":"错误信息"}


认证失效情况：
	token认证失效,会返回{“detail”:"身份认证信息未提供。"} ,在axios 的response拦截器做处理，并以提示

	框的形式显示出来。同时清除前端token


├── doc                        // 项目文档 
├── build                      // 构建相关  
├── config                     // 配置相关
├── src                        // 源代码
│   ├── api                    // 所有请求
│   ├── assets                 // 静态资源文件
│   ├── icons                  // ico图标
│   ├── components             // 全局UI组件
│   ├── mock                   // mock数据
│   ├── lang                   // 语言包
│   ├── vendor                 // 第三方包
│   ├── router                 // 路由
│   ├── store                  // 全局store管理
│   ├── utils                  // 全局公用方法
│   ├── styles                 // 全局样式
│   ├── views                  // view界面
│   │    ├── dashboard         //图表组件
│   │    ├── layout            //框架布局组件
│   │    ├── vwn               //示例
│   │    ├── login             //登录界面
│   │    ├── errorPage         //错误界面
│   │    └── permission        //权限测试界面
│   ├── App.vue                // 入口页面
│   └── main.js                // 入口 加载组件 初始化等
│   └── permission.js          // 权限 加载组件 初始化等
│   └── errorLog.js            // 错误日志 加载组件 初始化等
├── static                     // 静态资源
├── .babelrc                   // babel-loader 配置
├── eslintrc.js                // eslint 配置项
├── .gitignore                 // git 忽略项
├── favicon.ico                // favicon图标
├── index.html                 // html模板
└── package.json               // package.json